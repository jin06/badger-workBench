name: Release

on:
  push:
    tags:
      - 'v*' # Trigger workflow only when a tag matching 'v*' is pushed

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24

    - name: Install Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev xorg-dev libx11-dev libxcursor-dev libxrandr-dev libxi-dev libxinerama-dev

    - name: Cache Go Modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Dependencies
      run: go mod tidy

  build-macos:
    name: Build macOS Binaries
    runs-on: macos-latest # Use macOS runner for macOS builds
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24

    - name: Build macOS Binaries
      run: |
        mkdir -p bin
        CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o bin/BadgerWorkbench-${{ github.ref_name }}-darwin-amd64 .
        CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o bin/BadgerWorkbench-${{ github.ref_name }}-darwin-arm64 .

  build-windows:
    name: Build Windows Binaries
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24

    - name: Install MinGW
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64

    - name: Build for Windows (amd64 and 386)
      env:
        CC: x86_64-w64-mingw32-gcc
      run: |
        mkdir -p bin
        CGO_ENABLED=1 GOOS=windows GOARCH=amd64 CC=x86_64-w64-mingw32-gcc go build -o bin/BadgerWorkbench-${{ github.ref_name }}-windows-amd64.exe .
        CGO_ENABLED=1 GOOS=windows GOARCH=386 CC=i686-w64-mingw32-gcc go build -o bin/BadgerWorkbench-${{ github.ref_name }}-windows-386.exe .

  build-linux:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    container:
      image: fyneio/fyne-cross:base-latest # Use a Fyne-supported Docker image
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.24

    - name: Build for Linux (amd64 and arm64)
      run: |
        mkdir -p bin
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o bin/BadgerWorkbench-${{ github.ref_name }}-linux-amd64 .
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -o bin/BadgerWorkbench-${{ github.ref_name }}-linux-arm64 .

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-linux]
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this release
          - Automatically generated release notes.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: bin/
        asset_name: ${{ runner.os }}-binaries
        asset_content_type: application/zip
